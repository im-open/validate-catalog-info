{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "API.v1alpha1.schema.json",
  "$comment": "Based, with some modification & customization, on https://json.schemastore.org/catalog-info.json.",
  "description": "An API describes an interface that can be exposed by a component. The API can be defined in different formats, like OpenAPI, AsyncAPI, GraphQL, gRPC, or other formats.\nMore info @ https://techhub.mktp.io/docs/default/system/techhub/catalog-info-entities/api/ .",
  "examples": [
    {
      "apiVersion": "backstage.io/v1alpha1",
      "kind": "API",
      "metadata": {
        "name": "appointment-manager-service",
        "description": "Sets up appointments",
        "addresses": {
          "mktp.io": [
            {
              "subdomain": "techhub",
              "path": "/",
              "envs": "uat prod"
            }
          ]
        }
      },
      "spec": {
        "type": "openapi",
        "lifecycle": "maintaining",
        "owner": "group:default/ce2",
        "system": "system:default/appointment-manager",
        "definition": "openapi: \"3.0.0\"\ninfo:..."
      }
    }
  ],
  "allOf": [
    {
      "$ref": "Entity.schema.json"
    },
    {
      "type": "object",
      "required": ["spec"],
      "properties": {
        "kind": {
          "enum": ["API"]
        },
        "metadata": {
          "type": "object",
          "properties": {
            "addresses": {
              "type": "object",
              "description": "The addresses where the API can be accessed. Each property name of this object is the domain of the address, and the value of the property contains the remainder of the address information.",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "subdomain": {
                      "type": "string",
                      "description": "The subdomain of the address.",
                      "minLength": 1
                    },
                    "path": {
                      "type": "string",
                      "description": "The path of the address.",
                      "minLength": 1
                    },
                    "envs": {
                      "type": "string",
                      "description": "The environments where the entity is available.",
                      "minLength": 1
                    }
                  },
                  "examples": [
                    {
                      "subdomain": "api",
                      "path": "/household",
                      "envs": "dev qa stage prod"
                    }
                  ]
                }
              },
              "examples": [
                {
                  "mktp.io": [
                    {
                      "subdomain": "techhub",
                      "path": "/",
                      "envs": "uat prod"
                    }
                  ]
                }
              ]
            }
          }
        },
        "spec": {
          "type": "object",
          "required": ["type", "lifecycle", "definition", "system"],
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of the API definition. More info @ https://techhub.mktp.io/docs/default/system/techhub/catalog-info-entities/api/#property-value-restrictions .",
              "enum": ["openapi", "asyncapi"]
            },
            "lifecycle": {
              "type": "string",
              "description": "The lifecycle state of the API. More info @ https://techhub.mktp.io/docs/default/system/techhub/catalog-info-entities/api/#property-value-restrictions .",
              "enum": ["experimenting", "developing", "maintaining", "deprecating", "obsolete"]
            },
            "owner": {
              "type": "string",
              "description": "An entity reference to the owner of the API.\nThis should usually not be specified because the owner will be automatically determined via this repository's CODEOWNERS file.",
              "pattern": "\\b(?:group|user)\\b:(?:\\bdefault\\/\\b)?.+",
              "$comment": "Expected Pattern: '<kind>:[<optional-namespace>/]<entity-name>'",
              "examples": [
                "group:default/ce2",
                "group:ce2",
                "user:RyanHauert",
                "user:default/RyanHauert"
              ]
            },
            "system": {
              "type": "string",
              "description": "An entity reference to the system that the API belongs to.",
              "pattern": "\\b(?:system)\\b:(?:\\bdefault\\/\\b)?.+",
              "$comment": "Expected Pattern: 'system:[<optional-namespace>/]<system-name>'",
              "examples": [
                "system:default/appointment-manager",
                "system:appointment-manager"
              ]
            },
            "definition": {
              "anyOf": [
                {
                  "type": "string",
                  "description": "The definition of the API, based on the format defined by the type.",
                  "minLength": 1
                },
                {
                  "type": "object",
                  "properties": {
                    "$text": {
                      "type": "string",
                      "title": "Substitutions In The Descriptor Format",
                      "description": "Interprets the contents of the referenced file as plain text and embeds it as a string. \r\rMore info @ https://backstage.io/docs/features/software-catalog/descriptor-format/#substitutions-in-the-descriptor-format.",
                      "examples": [
                        "$text: https://petstore.swagger.io/v2/swagger.json",
                        "$text: ./dotnet-project/wwwroot/openapi.yml"
                      ]
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "$json": {
                      "type": "string",
                      "title": "Substitutions In The Descriptor Format",
                      "description": "Interprets the contents of the referenced file as JSON and embeds the parsed structure. \r\rMore info @ https://backstage.io/docs/features/software-catalog/descriptor-format/#substitutions-in-the-descriptor-format."
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "$yaml": {
                      "type": "string",
                      "title": "Substitutions In The Descriptor Format",
                      "description": "Interprets the contents of the referenced file as YAML and embeds the parsed structure. \r\rMore info @ https://backstage.io/docs/features/software-catalog/descriptor-format/#substitutions-in-the-descriptor-format."
                    }
                  }
                }
              ],
              "$comment": "Is required and must be a string or an object with a $text, $json, or $yaml property."
            }
          },
          "$comment": "It should contain definition, lifecycle, system, and type properties and may contain an optional owner prop."
        }
      }
    }
  ]
}
